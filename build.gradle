plugins {
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
	id 'maven-publish'
}

repositories {
	mavenCentral()
}

def mavenrepo = rootProject.projectDir.toString() + "/build/maven"
def vendordepsdir = rootProject.projectDir.toString() + "/build/vendordeps"
def libraryVersion = "1.1.5"
def publishGroupId = 'org.team2655'

def includeSrcInIncludeRoot = false

def baseArchiveName = 'robotsupport2655'

task headersZip(type: Zip) {
    destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "headers"

    from('src/main/include') {
        into '/'
    }
}
task zipSharedLibrary(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenashared" 
    from('build/libs/robotsupport2655/shared/release/') {
        into '/linux/athena/shared'
    }
}
task zipStaticLibrary(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenastatic"
    from('build/libs/robotsupport2655/static/release/') {
        into '/linux/athena/static'
    }
}
task zipSharedLibraryDebug(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenashareddebug" 
    from('build/libs/robotsupport2655/shared/debug/') {
        into '/linux/athena/shared'
    }
}
task zipStaticLibraryDebug(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenastaticdebug"
    from('build/libs/robotsupport2655/static/debug/') {
        into '/linux/athena/static'
    }
}

// Make sure build completes before trying to make a zip of the built libraries
zipSharedLibrary.dependsOn build
zipStaticLibrary.dependsOn build
zipSharedLibraryDebug.dependsOn build
zipStaticLibraryDebug.dependsOn build
headersZip.dependsOn build

model {
    components {
        robotsupport2655(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            // Defining my dependencies. In this case, WPILib
            useLibrary(it, "wpilib")
        }
    }
	publishing {
		repositories {
			maven {
				url = mavenrepo
			}
		}
        publications {
            cpp(MavenPublication) {
                artifact zipSharedLibrary
				artifact zipStaticLibrary
                artifact headersZip
				artifact zipSharedLibraryDebug
				artifact zipStaticLibraryDebug
                artifactId = "robotsupport-cpp"
                groupId publishGroupId
                version libraryVersion
            }
        }
    }
}

// Add the correct version number to the template JSON file and place it in the vendordeps folder to be zipped
task updateJSONVersion()  {
    mkdir vendordepsdir
    def newJSON = new File(vendordepsdir + "/Team2655RobotSupport.json")
    def templateJSON = new File(rootProject.projectDir.toString() + "/Team2655RobotSupport_template.json")

    newJSON.withWriter { def writer ->
        templateJSON.eachLine { def line ->
            def newLine = line.replace("__VERSION_HERE__", '"' + libraryVersion + '"')
            writer.write(newLine + "\n");
        }
    }
}

// Generate a zip file (with correct directory structure for )
task generateReleaseZip(type: Zip){

    subprojects.each { dependsOn("${it.name}:publish") }

    destinationDir = file("build")
    baseName = "team2655-robotsupport"
    classifier = libraryVersion
    from(mavenrepo) {
        into 'maven'
    }
    from(vendordepsdir){
        into 'vendordeps'
    }
}

publish.dependsOn updateJSONVersion
publish.finalizedBy generateReleaseZip
